name: Deploy Hexo to Firebase Hosting

on:
  push:
    branches:
      - main # 或者您用于生产部署的分支
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # with:
          # submodules: true # 如果您的主题作为 git submodule 引入
          # fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Hexo Site
        run: npx hexo generate # 生成静态文件到 public 目录

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}' 
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_HEXO_YOUR_PROJECT_ID }}' # 确保这个 Secret 名称与您在 GitHub 中设置的完全一致
          projectId: 'haiyewei-df8f9' # 更新为您的 Firebase 项目 ID
          channelId: live 
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels 
          # 如果不使用 service account JSON，而是使用 CI token:
          # FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

# 注意:
# 1. 请再次确认 'YOUR_FIREBASE_PROJECT_ID' 已被替换为您的 Firebase 项目 ID (已更新为 haiyewei-df8f9)。
# 2. 您必须在 GitHub 仓库的 Settings > Secrets and variables > Actions 中添加名为 `FIREBASE_SERVICE_ACCOUNT_HEXO_YOUR_PROJECT_ID` 的 Secret。
#    - 这个 Secret 的值必须是您的 Firebase 项目的服务账户 JSON 密钥的【完整内容】。
#    - 您可以从 Firebase 控制台 > 项目设置 > 服务帐号 > 生成新的私钥 来获取此 JSON 文件。
#    - 如果您使用了不同的 Secret 名称，请确保在上面的 `firebaseServiceAccount` 参数中也使用相同的名称。
# 3. 确保您的项目根目录下有 `firebase.json` 和 `.firebaserc` 文件。